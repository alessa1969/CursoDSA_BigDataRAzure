var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
var2 = var1
var2
mode var2
mat
# Fatiando a Matriz
mat <- matrix(c(2,3,4,5), nr = 2)
mat
mat[1,2]
mat[2,2]
mat[1,3]
mat[,2]
diag(matriz)
#Criando uma matriz diagonal
matriz = 1:3
diag(matriz)
#Extraindo vetor de uma matriz diagonal
vetor = diag(matriz)
vetor
diag(vetor)
#Transposta da Matriz
w <- matrix (c(2,4,8,12), nr = 2, ncol=2)
w
t w
t(w)
u <- t(w)
u
#Obtendo uma matriz inversa
solve(w)
# Multiplicação de Matrizes
mat1 <- matrix(c(2,3,4,5), nr =2)
mat1
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat2
mat1 * mat2
mat1 / mat2
mat1 + mat2
mat1 - mat2
x
#multiplicando Matriz com Vetor
x = c(1:4)
x
y = matrix(c(2,3,4,5), nr = 2)
y
#multiplicando Matriz com Vetor
x = c(1:4)
x
y = matrix(c(2,3,4,5), nr = 2)
y
x * y
#Nomeando a Mtriz
mat3 <- matrix(c('Terra', 'Marte', 'Saturno', 'Netuno'),  nr = 2)
mat3
#Nomeando a Mtriz
mat3 <- matrix(c('Terra', 'Marte', 'Saturno', 'Netuno'),  nr = 1)
mat3
#Nomeando a Mtriz
mat3 <- matrix(c('Terra', 'Marte', 'Saturno', 'Netuno'),  nr = 4)
mat3
#Nomeando a Mtriz
mat3 <- matrix(c('Terra', 'Marte', 'Saturno', 'Netuno'),  nr = 2)
mat3
dimnames(mat3) = (list(c("Linha1", "Linha2"), c("Coluna1", "Coluna2", "Coluna3")))
dimnames(mat3) = (list(c("Linha1", "Linha2"), c("Coluna1", "Coluna2")))
mat3
# Identificando linhas e colunas no momento de criação da Matriz
matrix(c(1,2,3,4), nr = 2, nc = 2, dimnames = list(c("linha2", "Linha2"), c("Coluna1", "Coluna")))
# Identificando linhas e colunas no momento de criação da Matriz
matrix(c(1,2,3,4), nr = 2, nc = 2, dimnames = list(c("linha1", "Linha2"), c("Coluna1", "Coluna2")))
# Combinado Matrizes
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
mat5 <- matrix(c(6,7,8,9), nr = 2)
mat5
cbind(mat4, mat5)
rbind(mat4, mat5)
#Desconstruindo a Matriz
c(mat4)
fazendo <- c(12, 24, 36)
mode(fazendo)
typeof(fazendo)
getwd()
lista_caractere1
#Listas de strings
lista_caractere1 = list('A', 'B', 'C')
lista_caractere1
lista_caractere2 = list(c("A", "A"), 'B', 'C')
lista_caractere2
lista_caractere3 = list(matrix(c("A", "A", "A", "A"), nr = 2), 'B', 'C')
lista_caractere3
#Lista de números inteiros
lista_inteiros = list(2,3,4)
lista_inteiros
#Lista de floats
lista_numero = list(1.90, 45.3, 300.5)
lista_numero
#Lista de números complexos
lista_complexos = list(5.2+3i, 2.4+8i)
lista_complexos
#lista de valores lógicos
lista_logicos = list(TRUE, FALSE, FALSE)
lista_logicos
#Lista Compostas
lista_composta1 = list("A", 3, TRUE)
lista_composta1
lista1 <- list(1:10, c("Zico", "Ronaldo", "Garrincha"), rnorm(10))
lista1
lista1 <- list(1:10, c("Zico", "Ronaldo", "Garrincha"), rnorm(10))
lista1
?rnorm
lsita1[2]
lista1[2]
#Slincing (Fatiamento) da lista
lista1[1]
#Slincing (Fatiamento) da lista
lista1[1]
lista1[2]
lista1[[2]][1]
lista1[[2]][1]
lista1[[2]][1] = "Monica"
lista1[[2]][1]
lista1[[2]][1] = "Monica"
# Para nomear os elementos - Listas Nomeadas
names(lista1) <- c("inteiros", "caracteres", "numéricos")
lista1
vec_num <- 1:4
vec_char <- c("A", "B", "C", 'D')
lista2 <- list(Numeros = vec_num, Letras = vec_char)
lista2
#Nomear os elementos diretamente
lista2 <- list(elemento1 = 3.5, elemento2 = c(7.2, 3.5))
lista2
#Trabalhando com elementos específicos da lista
names(lista1) = c("inteiros", "caracteres", "numericos")
lista1
length(lista1$inteiros)
lista1$inteiros
#Verificar o comprimento da lista
length(lista1)
#Versão 1
#versão 2
#Versão 3
library(tidyverse)
ls
clear
# Fatores
getwd()
setwd(C:/DSA/FCD/BigDataRAzure)
setwd("C:/DSA/FCD/BigDataRAzure")
# Fatores
getwd()
vect1 <- c("Macho", "Femea", "Femea", "Macho", "Macho")
vect1
fact_vec1 <- factor(vect1)
fact_vec1
class(vect1)
class(fact_vec1)
# variáveis categóricas nominais
# Não existe uma ordem implícita
animais <- c("Zebra", "Pantera", "Rinoceronte", "Macaco", "Tigre")
animais
class(animais)
fac_animais <- factor(animais)
fac_animais
class(fac_animais)
levels(fac_animais)
# Variáveis categóricas ordinais
# Possuem uma ordem natural
grad <- c("Mestrado", "Doutorado", "Bacharelado", "Mestrado", "Mestrado")
grad
fac_grad <- factor(grad, order= TRUE, levels = c("Doutorado", "Mestrado", "Bacharelado"))
fac_grad
levels(fac_grad)
# Sumarizar os dados fornece uma visão geral sobre o conteúdo das variáveis
summary(fac_grad)
summary(grad)
vec2 <- c("M", "F", "F", "M", "M", "M", "F", "F", "M", "M", "M", "F", "F", "M", "M")
vec2
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c("Femea", "Macho")
fac_vec2
summary(fac_vec2)
summary(vec2)
# Mais exemplos
data = c(1,2,2,3,1,2,3,3,1,2,3,3,1)
fdata = factor(data)
fdata
search()
install.packages(c("ggvis", "tm", "dplyr"))
search()
search()
getwd()
# Busca os pacotes carregados
search()
# Instala e carrega os pacotes
install.packages(c("ggvis", "tm", "dplyr"))
# Busca os pacotes carregados
search()
library(ggvis)
library(tm)
require(dplyr)
search()
?require
search()
?require
?require
detach(package:dplyr)
# Lista o conteúdo dos pacotes
?ls
ls(pos = "package:tm")
ls(getNamespace("tm"), all.names = TRUE)
# Lisra as funções de um pacote
lsf.str("package:tm")
# Lisra as funções de um pacote
lsf.str("package:tm")
lsf.str("pakage:ggplo2")
lsf.str("pakage:ggplot2")
library(ggplot2)
lsf.str("packge:ggplot2")
lsf.str("packge:ggplot2")
lsf.str("package:ggplot2")
library(MASS)
data()
?lynk
?lynx
head(lynx)
head(iris)
tail(lynx)
summary(lynx)
plot(lynx)
hist(lynk)
hist(lynx)
head(iris)
iris$Sepal.Length
sum(Sepal.Length)
sum(iris$Sepal.Length)
attach(iris)
sum(sepal.Length)
sum(Sepal.Length)
getwd()
setwd("C:/Dev/DSA/FCD/BigDataRAzure/")
getwd()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
#grep
?grep
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
#grepl
?grepl
#grepl
?grepl
grep("\\d", str, value = F)
grep("\\d", str, value = T)
#grepl
?grepl
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
#sub
sub("em", "EM", str)
#regexpr()
frase <- "Isso é uma string"
gregexpr(pattern = "u", frase)
#grepexpr()
grepexpr(pattern = "u", frase)
#grepexpr()
grepexpr(pattern = "u", frase)
#grepexpr()
gregexpr(pattern = "u", frase)
str2 <c("2678 é maior que 45 - @???!$",
"Vamos escrever 14 scripts R")
str2 <-c("2678 é maior que 45 - @???!$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
