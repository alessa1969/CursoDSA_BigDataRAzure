fdata = factor(data)
fdata
rdata = factor(data(labels = c("I", "II", "III")))
rdata = factor(data, (labels = c("I", "II", "III")))
rdata
# Fatores não ordenados
set1 <- c("AA", "B", "BA", "CC", "CA", "AA", "BA", "CC", "CC")
set1
# Transformando os dados.
f.set1 <- factor(set1)
f.set1
class(f.set1)
is.ordered(f.set1)
# fatores ordenados
o.set1 <- factor(set1)
f.set1
o.set1
is.ordered(o.set1)
# fatores ordenados
o.set1 <- factor(set1,
levels = c("CA", "BA", "AA", "CC", ""),
ordered = TRUE)
o.set1
is.ordered(o.set1)
as.numeric(o.set1)
table(o.set1)
# Fatores e Dataframes
df <- read.csv("etnias.csv", sep = ',')
# Fatores e Dataframes
df <- read.csv("etnias.csv", sep = ',')
# Fatores e Dataframes
df <- read.csv2("etnias.csv", sep = ',')
# Fatores e Dataframes
getwd()
setwd("C:/Dev/DSA/FCD/BigDataRAzure")
# Fatores e Dataframes
getwd()
df <- read.csv2("etnias.csv", sep = ',')
df
# variáveis do tipo fator
str(df)
View(df)
# variáveis do tipo fator
str(df)
# Níveis dos fatores
levels(df$Etnia)
summary(df$Etnia)
# Plot
plot(df$Idade~df$Etnia, xlab ='Etinia', ylab = 'Idade', main = 'Idade por Etinia')
# Plot
plot(df$Idade~df$Etnia, xlab ='Etnia', ylab = 'Idade', main = 'Idade por Etinia')
df <- read.csv2("etnias.csv", sep = ',')
df
# variáveis do tipo fator
str(df)
# Níveis dos fatores
levels(df$Etnia)
summary(df$Etnia)
setwd("C:/Dev/DSA/FCD/BigDataRAzure")
df <- read.csv2("etnias.csv", sep = ',')
df
# variáveis do tipo fator
str(df)
# Níveis dos fatores
levels(df$Etnia)
summary(df$Etnia)
# Plot
plot(df$Idade~df$Etnia, xlab ='Etnia', ylab = 'Idade', main = 'Idade por Etinia')
# Regressão
summary(lm(Idade~Etnia, data = df))
str(df)
# Convertendo uma coluna em variável categórica. isso criará um fator ordenado
df
str(df)
df$Estado_Civil.cat <- factor(df$Estado_Civil, labels = c("Solteiro", "Casado", "Divorciado"))
df
str(df)
df$Sexo.cat <- factor(df$Sexo, labels = c("F", "M")
df
df$Sexo <- factor(df$Sexo, labels = c("F", "M"))
df
str(df)
df$Etnia <- factor(df$Etnia, labels = c("Branco", "Negro", "Pardo"))
df
str(df)
# Níveis dos fatores
levels(df$Etnia)
summary(df$Etnia)
# Plot
plot(df$Idade~df$Etnia, xlab ='Etnia', ylab = 'Idade', main = 'Idade por Etinia')
df <- read.csv2("etnias.csv", sep = ',')
df
# variáveis do tipo fator
str(df)
df$Sexo <- factor(df$Sexo, labels = c("F", "M"))
df$Etnia <- factor(df$Etnia, labels = c("Branco", "Negro", "Pardo"))
str(df)
View(df)
# Níveis dos fatores
levels(df$Etnia)
summary(df$Etnia)
# Plot
plot(df$Idade~df$Etnia, xlab ='Etnia', ylab = 'Idade', main = 'Idade por Etinia')
# Regressão
summary(lm(Idade~Etnia, data = df))
# Convertendo uma coluna em variável categórica. isso criará um fator ordenado
df
str(df)
df$Estado_Civil.cat <- factor(df$Estado_Civil, labels = c("Solteiro", "Casado", "Divorciado"))
df
str(df)
# Fatores e Dataframes - Compreendendo a Ordem dos Fatores
getwd()
# Fatores e Dataframes - Compreendendo a Ordem dos Fatores
getwd()
# criando vetores
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c('Verde', 'Laranja', 'Azul', 'Laranja', 'Verde')
vec2 <- c(0, 1, 1, 0, 1)
# Fatores e Dataframes - Compreendendo a Ordem dos Fatores
getwd()
# criando vetores
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c(0, 1, 1, 0, 1)
vec3 <- c('Verde', 'Laranja', 'Azul', 'Laranja', 'Verde')
# Unindo os vetores em um dataframe
sf <- data.frame(vec1, vec2, vec)
# Unindo os vetores em um dataframe
sf <- data.frame(vec1, vec2, vec3)
# criando vetores
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c(0, 1, 1, 0, 1)
vec3 <- c('Verde', 'Laranja', 'Azul', 'Laranja', 'Verde')
# Unindo os vetores em um dataframe
df <- data.frame(vec1, vec2, vec3)
df
# Verificando que o R categorizou a última coluna como fator
str(df)
df$vec3 <- factor(df$vec3, labels = c("Verde", "Laranja", "Azul"))
# Verificando que o R categorizou a última coluna como fator
str(df)
levels(df$vec3)
# Criando uma outra coluna e atribuindo labels
df$cat1 < factor(df$vec3, labels = c("cor2", "cor1", "cor3"))
# Criando uma outra coluna e atribuindo labels
df$cat1 <- factor(df$vec3, labels = c("cor2", "cor1", "cor3"))
df
# Internamente os fatores são registador como inteiros
str(df)
# criando vetores
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c(0, 1, 1, 0, 1)
vec3 <- c('Verde', 'Laranja', 'Azul', 'Laranja', 'Verde')
# Unindo os vetores em um dataframe
df <- data.frame(vec1, vec2, vec3)
df$vec3 <- factor(df$vec3, labels = c("Azul", "Laranja", "Verde"))
# Verificando que o R categorizou a última coluna como fator
str(df)
# Verificando os níveis do fator
levels(df$vec3)
# Criando uma outra coluna e atribuindo labels
df$cat1 <- factor(df$vec3, labels = c("cor2", "cor1", "cor3"))
df
# Criando uma outra coluna e atribuindo labels
df$cat1 <- factor(df$vec3, labels = c("cor1", "cor2", "cor3"))
df
# Criando uma outra coluna e atribuindo Label
df$ct2 <- factor(df$vec2, labels = c("Divorciado", "Casado", "Solteiro"))
# Internamente os fatores são registador como inteiros
str(df)
# Criando uma outra coluna e atribuindo Label
df
df$ct2 <- factor(df$vec2, labels = c("Divorciado", "Casado"))
str(df$ct2)
# criando vetores
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c(0, 1, 1, 0, 1, 2)
vec3 <- c('Verde', 'Laranja', 'Azul', 'Laranja', 'Verde')
# Unindo os vetores em um dataframe
df <- data.frame(vec1, vec2, vec3)
# criando vetores
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c(0, 1, 1, 0, 1, 2)
vec3 <- c('Verde', 'Laranja', 'Azul', 'Laranja', 'Verde')
# Unindo os vetores em um dataframe
df <- data.frame(vec1, vec2, vec3)
# criando vetores
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c(0, 1, 1, 0, 2)
vec3 <- c('Verde', 'Laranja', 'Azul', 'Laranja', 'Verde')
# Unindo os vetores em um dataframe
df <- data.frame(vec1, vec2, vec3)
df$vec3 <- factor(df$vec3, labels = c("Azul", "Laranja", "Verde"))
# Verificando que o R categorizou a última coluna como fator
str(df)
# Verificando os níveis do fator
levels(df$vec3)
# Criando uma outra coluna e atribuindo labels
df$cat1 <- factor(df$vec3, labels = c("cor1", "cor2", "cor3"))
df
# Internamente os fatores são registador como inteiros
str(df)
# Criando uma outra coluna e atribuindo Label
df
df$cat2 <- factor(df$vec2, labels = c("Divorciado", "Casado"))
df$cat2 <- factor(df$vec2, labels = c("Divorciado", "Casado", "Solteiro"))
str(df$ct2)
levels(df$cat2)
str(df$cat2)
levels(df$cat2)
# Estuturas de Controle
getwd()
# Estuturas de Controle
getwd()
# If-else
x = 25
if(x < 30)
{"Este número é menor que 30"}
# If-else
x = 25
if(x < 20)
{"Este número é menor que 30"}
# If-else
x = 25
if(x < 20)
{"Este número é menor que 30"}
# If-else
x = 25
if(x < 20)
{"Este número é menor que 30"}
if(x < 30)
{"Este número é menor que 30"}
# Chaves não são obrigatórias, mas altamente recomendados
if(x < 30)
"Este número é menor que 30"
# Else
if(x < 7){
"Este número é menor que 7"
} else{
"Este número não é menor que 7"
}
# Comandos pode ser aninhados
x = 7
if(x <7){
"Este número é menor que 7"
} else if(x == 7){
"Este é o número 7"} else{
"Este número não é menor que 7"
}
# Ifelse
x = 5
ifelse(x < 6, "Correto!", NA)
x = 9
ifelse(x< 6, "Correto!", NA)
# Expressões ifelse aninhadas
x = c(7, 5, 4)
ifelse(x < 5, "Menor que 5",
ifelse(x == 5, "Igual a 5", "Maior que 5"))
# Estruturas If dentro de funções
func1 <- function(x,y){
ifelse(y < 7, x + y, "Não encontrado" )
}
func1(4,2)
func1(40,7)
# Rep
rep(rnorm(10), 5)
# repeat
x = 1
repeat{
x = x + 3
if(x > 99)
break
print(x)
}
# Loop for
for(i in 1:20){print(i)}
for(q in rnorm(10)){print(q)}
# Ignora alguns elementos dentro do loop
for(i in 1:22){
if(i == 13 | i == 15)
next
print(i)
}
# Interromper o loop
for(i in 1:22){
if(i == 13)
break
print(i)
}
# Loop While
x = 1
while (x < 5) {
x = x + 1
print(x)
}
# o loop while não será executado
y = 6
while(y < 5){
y = y + 10
print(y)
}
# Funções
getwd()
# Help
? sample
# Help
? sample
args(sample)
args(mean)
args(sd)
# Funções Buit-in
abs(-43)
sum(c(1:5))
mean(c(1:5))
round(c(1.1:5.8))
rev(c(1:5))
seq(1:5)
sort(rev(c(1:5)))
append(c(1:5), 6)
z <- c(7, 4, 8, 9, 5, 12, 3)
z
sort(z)
vec1 <- c(1.5, 2.5, 8.4, 3.7, 6.3)
vec1
vec2 < rev(vec1)
vec2 <- rev(vec1)
vec2
# Funções dentro de funções
plot(rnorm(10))
mean(c(abs(vec1), abs(vec2)))
# Criando funções
myfunc <- function(x){x + x}
myfunc(10)
class(myfunc)
myfunc2 <- function(a, b){
valor = a ^ b
print(valor)
}
myfunc2(3, 2)
jogando_dados <- function(){
num <- sample(1:6, size = 1) # local
num
}
jogando_dados()
jogando_dados()
jogando_dados()
jogando_dados()
jogando_dados()
jogando_dados()
vec2 <- c("a", "b", "c", "d")
# Funções sem número definido de argumentos
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
vec3 <- c(6.5, 9.2, 11.9, 5.1)
# Escopo
print(num)
num <- c(1:6)
num #Global
# Escopo
print(num)
# Funções sem número definido de argumentos
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
vec3 <- c(6.5, 9.2, 11.9, 5.1)
myfunc3 <- function(...){
df = data.frame(cbind(...))
print(df)
}
myfunc3(vec1)
myfunc3(vec1)
myfunc3(vec2, vec3)
myfunc3(vec1, vec2, vec3)
x <- 1:1000000
x <- 1:1000000
# Funão que calcula a raiz quadrada de cada elemento de um vetor de números
meu_sqr <- function(numeros){
resp <- numeric(length(numeros))
for(i in seq_along(numeros)){
resp[i] <- sqrt(numeros[i])
}
return(resp)
}
system.time(x2a <- meu_sqr(x))
system.time(x2b <- sqrt(x))
x <- 1:10000000
# Funão que calcula a raiz quadrada de cada elemento de um vetor de números
meu_sqr <- function(numeros){
resp <- numeric(length(numeros))
for(i in seq_along(numeros)){
resp[i] <- sqrt(numeros[i])
}
return(resp)
}
system.time(x2a <- meu_sqr(x))
system.time(x2b <- sqrt(x))
# Sua máquina pode apresentr resultados diferentes por conta da precisão do calculo
identical(x2a, x2b)
# Família Apply - Uma forma elegante de fazer loops
getwd()
# usando um loop
lista1 <- list(a = (1:20), b = (35:67))
# usando um loop
lista1 <- list(a = (1:20), b = (35:67))
# Calculando o total de cada elemento da lista for
valor_a = 0
valor_b = 0
for(i in lista1$a){
valor_a =  valor_a + i
}
for(j in lista1$b){
valor_b = valor_b + j
}
print(valor_a)
print(valor_b)
# Calculando cada elemento da lista com sapply
?sapply
sapply(lista1, sum)
# Aplicando funções com sapply
sapply(lista1, mean)
x <- matrix(c(20, 13, 65, 32, 45, 12, 76, 49, 82), nr = 3, byrow = T)
x
x <- matrix(c(20, 13, 65, 32, 45, 12, 76, 49, 82), nr = 3, byrow = T)
x
apply(x, mean)
apply(x, 1, mean)
apply(x, 2, mean)
apply(x, 1, plot)
resultapply <- apply(x, 1, mean)
resultapply
# Aplicando apply() a um Dataframe
escola <- data.frame(Aluno = c('Bob', 'Tereza', 'Marta', 'Felipe', 'Zacarias', 'Zacarias'),
Fisica = c(91, 82, 75, 97, 62, 74),
Matematica = c(99, 100, 86, 92, 91, 87),
quimica = c(56, 72, 49, 68, 59, 77))
escola
escola$Matematica
escola
# Calculando a Média por aluno
escola$Media = NA
escola
escola$Media = apply(escola[, c(2, 3, 4)], 1, mean)
escola
# Aplicando apply() a um Dataframe
escola <- data.frame(Aluno = c('Bob', 'Tereza', 'Marta', 'Felipe', 'Zacarias', 'Zacarias'),
Fisica = c(91, 82, 75, 97, 62, 74),
Matematica = c(99, 100, 86, 92, 91, 87),
quimica = c(56, 72, 49, 68, 59, 77))
escola
escola$Matematica
# Calculando a Média por aluno
escola$Media = NA
escola
escola$Media = apply(escola[, c(2, 3, 4)], 1, mean)
escola
# tapply
?gl
tabela_basquete <-
data.frame(equipe = gl(5,5, labels = paste("Equipe", LETTERS[1:5])),
jogador = sample(letters, 25),
num_cestas = floor(runif(25, min = 0, max = 50)))
View(tabela_basquete)
summary((tabela_basquete))
# tapply() vs sqldf
install.packages(('sqldf'))
library(sqldf)
sqldf("select equipe, sum(num_cestas) from tabela_basquete group by equipe")
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, sum)
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, mean)
sqldf("select equipe, sum(num_cestas) from tabela_basquete group by equipe")
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, sum)
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, mean)
# by
?by
dat <- data.frame(species = c(rep(c(1,2,3), each=5)),
petal.length=c(rnorm(5, 4.5, 1),
rnorm(5, 4.5, 1),
rnorm(5, 5.5, 1)),
petal.width=c(rnorm(5, 2.5, 1),
rnorm(5, 2.5, 1),
rnorm(5, 4, 1))
)
dat$species <- factor(dat$species)
View(dat)
by(dat, dat$species, function(x){
# calcular o comprimento médio da pétala para cada espécie
mean.pl <- mean(x$petal.length)
})
# lapply()
?lapply
lista1 <- list(a = (1:10), b = (45:77))
lista1
lapply(lista1, sum)
lapply(lista1, sum)
sapply(lista1, sum)
vapply(lista1,
fivenum,
c(Min. = 0,
"1stQu." = 0,
Median = 0,
"3rt Qu." = 0,
Max = 0))
# Relicate
? replicate
replicate(7, runif(10))
#mapply()
?mapply
mapply(rep, 1:4, 4:1)
lista2 <- list(a = c(1:5), b = c(6:10))
lista2
rapply(lista2, sum)
rapply(lista2, sum, how = "List")
rapply(lista2, sum, how = "list")
