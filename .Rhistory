getwd()
# Exercício 1 - Crie um vetor com 30 números inteiros
vetorExerc1 <- c(1:30)
mode?
mode(vetorExerc1)
# Exercício 1 - Crie um vetor com 30 números inteiros
vetorExerc1 <- c(1:30)
mode(vetorExerc1)
# Exercício 1 - Crie um vetor com 30 números inteiros
vetorExerc1 <- c(1:30)
class(vetorExerc1)
mode(vetorExerc1)
typeof(vetorExerc1)
# Exercício 1 - Crie um vetor com 30 números inteiros
vetorExerc1 <- c(1:30)
class(vetorExerc1)
mode(vetorExerc1)
typeof(vetorExerc1)
# Exercício 1 - Crie um vetor com 30 números inteiros
vetorExerc1 <- c(1:30)
length(vetorExerc1)
class(vetorExerc1)
mode(vetorExerc1)
typeof(vetorExerc1)
# Número de Linhas
matrix (c(1,2,3,4,5,6), nr = 2)
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matriz_Exerc2 <- matrix(c(1:16), nr = 4)
matriz_Exerc2
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
listaExerc3 = as.list(vetorExerc1, matriz_Exerc2)
listaExerc3
length(listaExerc3)
View(listaExerc3)
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
listaExerc3 = list(vetorExerc1, matriz_Exerc2)
listaExerc3
length(listaExerc3)
read.table()?
?read.table()
?read.table
View(effort.dat)
read.table(effort.dat, header = TRUE, sep = " ")
read.table(effort.dat, header = TRUE,)
dataframeExer4 <- data.frame(read.table('effort.dat', header = TRUE, sep="")
dataframeExer4 <- data.frame(read.table('effort.dat', header = TRUE, sep=""))
dataframeExer4 <- data.frame(read.table('effort.dat', header = TRUE, sep=""))
dataframeExer4 <- data.frame(read.table('C:/Dev/DSA/FCD/BigDataRAzure/effort.dat', header = TRUE, sep=""))
dataframeExer4 <- data.frame(read.table(file = 'effort.dat', header = TRUE, sep=""))
dataframeExer4 <- data.frame(read.table(file = 'effort.dat', header = TRUE, sep=""))
read.table(file = 'effort.dat', header = TRUE, sep="")
read.table(file = 'effort.dat', header = TRUE, fileEncoding = text)
read.table(file = 'effort.dat', header = TRUE, fileEncoding = "")
read.table(file = 'effort.dat', header = TRUE, fileEncoding = "")
read.table(file = 'effort.dat', header = TRUE, fileEncoding = text.default())
read.table(file = 'effort.dat', header = TRUE, fileEncoding = text())
read.table(file = 'effort.dat', header = TRUE, fileEncoding = text)
read.table(file = 'effort.dat', header = TRUE, fileEncoding = text)
read.table(effort.dat, header = TRUE, fileEncoding = text)
read.table(file = effort.dat, header = TRUE, fileEncoding = text)
read.table(file = "effort.dat", header = TRUE, fileEncoding = text)
read.table(file = "effort.dat", header = TRUE,)
read.table(file = "effort.dat.txt", header = TRUE,)
read.table(file = "http://data.princeton.edu/wws509/datasets/effort.dat", header = TRUE)
dataframeExer4 <- data.frame(read.table(file = "http://data.princeton.edu/wws509/datasets/effort.dat", header = TRUE))
dataframeExer4
names(nomeado) <- c("config", "esfc", "chang")
dataframeExer5 <- cbind(dataframeExer4, c("config", "esfc", "chang"))
dataframeExer5 <- cbind(dataframeExer4, c( "","config", "esfc", "chang"))
dataframeExer5
names(dataframeExer4) <- c("config", "esfc", "chang")
dataframeExer5 <- names(dataframeExer4) <- c("config", "esfc", "chang")
dataframeExer5
dataframeExer4
names(dataframeExer4) <- c("config", "esfc", "chang")
dataframeExer4
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no dataframe iris e imprima um resumo do dataset
view(iris)
View(iris)
head(iris)
dim(iris)
summary(iris)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
?plot
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
?hist
hist(iris$Sepal.Length, iris$Sepal.Width)
barplot(iris$Sepal.Length, iris$Sepal.Width)
hist(iris$Sepal.Length, iris$Sepal.Width)
hist(iris$Sepal.Length)
barplot(iris$Sepal.Length, iris$Sepal.Width)
grid(nx=NA, ny=NULL)
barplot(iris$Sepal.Length, iris$Sepal.Width)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
?subset
subset(iris, iris$Sepal.Length > 7)
dataframeExerc8 <-subset(iris, iris$Sepal.Length > 7)
dataframeExerc8
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
library(dplyr)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
package(dplyr)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
install.packages("dplyr")
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
# install.packages("dplyr") > Já tenho instalado
?subset
slice(iris, subset(15))
slice(iris, subset(iris, 15))
slice(iris)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
# install.packages("dplyr") > Já tenho instalado
?subset
subset(iris, nm = 15)
subset(iris,row_number(15)))
subset(iris,row_number(15))
subset(iris,iris$row_number(15))
row_number(iris,15)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
# install.packages("dplyr") > Já tenho instalado
iris
?subset
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
# install.packages("dplyr") > Já tenho instalado
summarise(iris)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
# install.packages("dplyr") > Já tenho instalado
dim(iris)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
# install.packages("dplyr") > Já tenho instalado
dim(iris)subset(iris, row.names(iris) < 16)
subset(iris, row.names(iris) < 16)
subset(iris, row.names(iris) < 16)
subset(iris, row.names(iris) = 16)
subset(iris, row.names(iris) == 16)
subset(iris, row.names(iris) == 1:15)
subset(iris, row.names(iris) < 15)
subset(iris, row.names(iris) < 16)
subset(iris, row.names(iris) == 1:15)
?slice
dataFrameExerc9_15firstLine
dataFrameExerc9_15firstLine <- subset(iris, row.names(iris) == 1:15)
dataFrameExerc9_15firstLine
slice(iris, 15)
slice(iris, prop == 15)
slice_head(iris, prop == 15)
slice_head(iris, prop = 15)
slice_head(iris, n <15, prop = 15)
slice_head(iris, prop == 15)
slice_head(iris, prop = 15)
slice(iris, .row(15))
slice(iris, ...row(15))
slice(iris, ... = 15)
slice(iris, ... < 15)
slice(iris, ... 1:15)
slice(iris, ... = 1:15)
slice(iris, n=15)
slice(iris, ntile(x = row_number(), 15)
slice(iris, ntile(x = row_number(), 15))
slice(iris, ntile(x = row_number(15)))
slice(iris, ntile(x = 15))
slice(iris, ntile(15))
slice(iris, row_number(15))
slice(iris, cume_dist(15))
slice(iris, cume_dist(1:15))
slice(iris, cume_dist(1,15))
slice(iris, ntile(,15))
slice(iris, ntile(,n =15))
?slice
slice(iris, ... = 1:15)
slice(iris, ... = 1:15)
slice(iris, n = 1, prop=15)
slice(iris, n = 1, prop ==15)
slice(iris, n = 15, prop = TRUE)
slice(iris, n = 15, prop = TRUE)
slice(iris, n = , prop = TRUE)
slice(iris, n = TRUE, prop = TRUE)
slice_min(iris, n=15)
slice_min(iris,order_by = 15)
slice_min(iris,order_by, n = 15)
slice_head(iris,,proc.time(15))
slice_head(iris,proc.time(15))
slice_head(iris,proc.time())
slice_head(iris,prop.table(15))
?slice
?slice
slice_sample(iris)
slice_sample(iris)
slice_max(iris,15)
slice_max(iris,15)
slice_max(iris,n <= 15)
slice_max(iris,n < 15)
slice_max(iris,n = 15)
slice_max(iris,n == 15)
slice_max(iris,<15)
slice(iris, ... = 1:15)
dataFrameExerc9_comSlice = slice(iris, ... = 1:15)
dataFrameExerc9_comSlice
dataFrameExerc9_15firstLine <- subset(iris, row.names(iris) == 1:15)
dataFrameExerc9_15firstLine
dataFrameExerc9_comSlice
dataFrameExerc9_comSlice = slice(iris, ... = 1:15)
dataFrameExerc9_comSlice
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
dataFrameExerc9_15firstLine$Sepal.Length > 6
?RSiteSearch
?filter
?RSiteSearch
filter(dataFrameExerc9_comSlice, dataFrameExerc9_comSlice$Sepal.Length > 5)
filter(dataFrameExerc9_comSlice, dataFrameExerc9_comSlice$Sepal.Length > 6)
